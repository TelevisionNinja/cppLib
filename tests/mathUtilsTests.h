#ifndef MATHUTILSTESTS_H
#define MATHUTILSTESTS_H

#include "../src/unitTest.h"
#include "../src/mathUtils.h"
#include <cmath>
#include "../src/stringUtils.h"

std::vector<double> logistic(double t, std::vector<double> y) {
    return {0.01 * y[0] * (1 - y[0])};
}

std::vector<double> stiff(double t, std::vector<double> y) {
    double mlambda1 = -0.1;
    double mlambda2 = 1000 * mlambda1;
    return {mlambda1 * y[0], mlambda2 * y[1]};
}

void mathUtilsTests() {
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, -2), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, -1), -1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, 0), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, 1), -1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, 2), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, 3), -1);

    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, -2), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, -1), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, 0), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, 1), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, 2), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, 3), 1);

    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, -2), 1.0 / 4.0);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, -1), 1.0 / 2.0);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, 0), 1);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, 1), 2);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, 2), 4);
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, 3), 8);

    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, -2), std::pow(-1, -2));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, -1), std::pow(-1, -1));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, 0), std::pow(-1, 0));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, 1), std::pow(-1, 1));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, 2), std::pow(-1, 2));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(-1, 3), std::pow(-1, 3));

    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, -2), std::pow(1, -2));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, -1), std::pow(1, -1));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, 0), std::pow(1, 0));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, 1), std::pow(1, 1));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, 2), std::pow(1, 2));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(1, 3), std::pow(1, 3));

    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, -2), std::pow(2, -2));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, -1), std::pow(2, -1));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, 0), std::pow(2, 0));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, 1), std::pow(2, 1));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, 2), std::pow(2, 2));
    UNIT_TEST_EQ(tvnj::exponentiationBySquaring(2, 3), std::pow(2, 3));

    std::vector<double> t = {0,5000};
    std::vector<double> y0 = {0.00001};
    tvnj::OrdinaryDifferentialEquationResult result = tvnj::runge_kutta_order_4_explicit(logistic, t, y0, std::numeric_limits<double>::infinity(), 0.01, 0.05, 0.01);
    std::vector<double> expectedResult = {0, 0.01, 0.03, 0.07, 0.15000000000000002, 0.31000000000000005, 0.6300000000000001, 1.27, 2.55, 5.109999999999999, 10.23, 20.47, 40.95, 81.91, 163.82999999999998, 327.66999999999996, 655.3499999999999, 819.1899999999999, 901.1099999999999, 983.0299999999999, 1064.9499999999998, 1146.87, 1228.79, 1310.71, 1392.63, 1474.5500000000002, 1556.4700000000003, 1638.3900000000003, 1802.2300000000002, 2129.9100000000003, 2457.59, 2621.4300000000003, 2785.2700000000004, 3112.9500000000003, 3440.63, 3768.31, 3932.15, 4259.83, 4587.51, 4751.35, 5000};
    expectedResult = tvnj::vector_abs(tvnj::vector_subtraction(result.t, expectedResult));
    UNIT_TEST_EQ(tvnj::join(expectedResult,", "), tvnj::repeat("0.000000, ", 40) + "0.000000");

    UNIT_TEST_EQ(y0[0], 0.00001);
    UNIT_TEST_EQ(tvnj::join(t,", "), "0.000000, 5000.000000");

    result = tvnj::backward_differentiation_formula_order_6_implicit(logistic, t, y0, std::numeric_limits<double>::infinity(), 0.01, 0.01, 0.00001);
    expectedResult = {0, 0.01, 0.03, 0.07, 0.15000000000000002, 0.31000000000000005, 0.6300000000000001, 1.27, 2.55, 5.109999999999999, 10.23, 20.47, 40.95, 81.91, 163.82999999999998, 327.66999999999996, 655.3499999999999, 737.2699999999999, 778.2299999999999, 819.1899999999999, 860.15, 901.11, 942.07, 983.0300000000001, 1023.9900000000001, 1064.95, 1105.91, 1146.8700000000001, 1187.8300000000002, 1228.7900000000002, 1269.7500000000002, 1310.7100000000003, 1351.6700000000003, 1392.6300000000003, 1433.5900000000004, 1474.5500000000004, 1515.5100000000004, 1556.4700000000005, 1597.4300000000005, 1638.3900000000006, 1679.3500000000006, 1720.3100000000006, 1761.2700000000007, 1802.2300000000007, 1843.1900000000007, 1884.1500000000008, 1925.1100000000008, 1966.0700000000008, 2007.0300000000009, 2047.990000000001, 2129.9100000000008, 2211.830000000001, 2293.750000000001, 2457.590000000001, 2785.270000000001, 3440.630000000001, 4751.350000000001, 5000};
    expectedResult = tvnj::vector_abs(tvnj::vector_subtraction(result.t, expectedResult));
    UNIT_TEST_EQ(tvnj::join(expectedResult,", "), tvnj::repeat("0.000000, ", 57) + "0.000000");

    t = {0,10};
    y0 = tvnj::ones<double>(2);

    result = tvnj::runge_kutta_order_4_explicit(stiff, t, y0, std::numeric_limits<double>::infinity(), 0.01, 0.01, 0.0001);
    expectedResult = {0, 0.00125, 0.0025, 0.00375, 0.005, 0.00625, 0.007500000000000001, 0.00875, 0.01, 0.01125, 0.012499999999999999, 0.015, 0.017499999999999998, 0.019999999999999997, 0.022499999999999996, 0.024999999999999994, 0.027499999999999993, 0.032499999999999994, 0.03749999999999999, 0.04249999999999999, 0.05249999999999999, 0.06249999999999999, 0.08249999999999999, 0.1225, 0.1425, 0.1825, 0.1925, 0.2125, 0.2525, 0.2725, 0.3125, 0.3225, 0.3425, 0.3825, 0.4025, 0.4425, 0.4525, 0.47250000000000003, 0.5125000000000001, 0.5225000000000001, 0.5425000000000001, 0.5825000000000001, 0.6025000000000001, 0.6425000000000002, 0.6525000000000002, 0.6725000000000002, 0.7125000000000002, 0.7325000000000003, 0.7725000000000003, 0.7825000000000003, 0.8025000000000003, 0.8425000000000004, 0.8625000000000004, 0.9025000000000004, 0.9125000000000004, 0.9325000000000004, 0.9725000000000005, 0.9925000000000005, 1.0325000000000004, 1.0425000000000004, 1.0625000000000004, 1.1025000000000005, 1.1225000000000005, 1.1625000000000005, 1.1725000000000005, 1.1925000000000006, 1.2325000000000006, 1.2525000000000006, 1.2925000000000006, 1.3025000000000007, 1.3225000000000007, 1.3625000000000007, 1.3825000000000007, 1.4225000000000008, 1.4325000000000008, 1.4525000000000008, 1.4925000000000008, 1.5125000000000008, 1.5525000000000009, 1.5625000000000009, 1.582500000000001, 1.622500000000001, 1.642500000000001, 1.682500000000001, 1.692500000000001, 1.712500000000001, 1.752500000000001, 1.772500000000001, 1.812500000000001, 1.8225000000000011, 1.8425000000000011, 1.8825000000000012, 1.9025000000000012, 1.9425000000000012, 1.9525000000000012, 1.9725000000000013, 2.012500000000001, 2.032500000000001, 2.072500000000001, 2.082500000000001, 2.102500000000001, 2.142500000000001, 2.1525000000000007, 2.1725000000000008, 2.212500000000001, 2.232500000000001, 2.272500000000001, 2.2825000000000006, 2.3025000000000007, 2.3425000000000007, 2.3625000000000007, 2.4025000000000007, 2.4125000000000005, 2.4325000000000006, 2.4725000000000006, 2.4925000000000006, 2.5325000000000006, 2.5425000000000004, 2.5625000000000004, 2.6025000000000005, 2.6225000000000005, 2.6625000000000005, 2.6725000000000003, 2.6925000000000003, 2.7325000000000004, 2.7525000000000004, 2.7925000000000004, 2.8025, 2.8225000000000002, 2.8625000000000003, 2.8825000000000003, 2.9225000000000003, 2.9325, 2.9525, 2.9925, 3.0125, 3.0525, 3.0625, 3.0825, 3.1225, 3.1425, 3.1825, 3.1925, 3.2125, 3.2525, 3.2725, 3.3125, 3.3225, 3.3425, 3.3825, 3.4025, 3.4425, 3.4524999999999997, 3.4724999999999997, 3.5124999999999997, 3.5324999999999998, 3.5725, 3.5824999999999996, 3.6024999999999996, 3.6424999999999996, 3.6524999999999994, 3.6724999999999994, 3.7124999999999995, 3.7324999999999995, 3.7724999999999995, 3.7824999999999993, 3.8024999999999993, 3.8424999999999994, 3.8624999999999994, 3.9024999999999994, 3.912499999999999, 3.932499999999999, 3.9724999999999993, 3.9924999999999993, 4.032499999999999, 4.042499999999999, 4.062499999999998, 4.102499999999998, 4.122499999999998, 4.162499999999998, 4.172499999999998, 4.192499999999997, 4.232499999999997, 4.252499999999997, 4.292499999999997, 4.302499999999997, 4.322499999999996, 4.362499999999996, 4.382499999999996, 4.422499999999996, 4.432499999999996, 4.452499999999995, 4.492499999999995, 4.512499999999995, 4.552499999999995, 4.562499999999995, 4.582499999999994, 4.622499999999994, 4.642499999999994, 4.682499999999994, 4.692499999999994, 4.712499999999993, 4.752499999999993, 4.772499999999993, 4.812499999999993, 4.822499999999993, 4.842499999999992, 4.882499999999992, 4.902499999999992, 4.942499999999992, 4.952499999999992, 4.972499999999991, 5.012499999999991, 5.032499999999991, 5.072499999999991, 5.082499999999991, 5.10249999999999, 5.14249999999999, 5.16249999999999, 5.20249999999999, 5.21249999999999, 5.232499999999989, 5.272499999999989, 5.282499999999989, 5.302499999999989, 5.342499999999989, 5.362499999999988, 5.402499999999988, 5.412499999999988, 5.432499999999988, 5.472499999999988, 5.492499999999987, 5.532499999999987, 5.542499999999987, 5.562499999999987, 5.602499999999987, 5.622499999999986, 5.662499999999986, 5.672499999999986, 5.692499999999986, 5.732499999999986, 5.752499999999985, 5.792499999999985, 5.802499999999985, 5.822499999999985, 5.862499999999985, 5.882499999999984, 5.922499999999984, 5.932499999999984, 5.952499999999984, 5.992499999999984, 6.012499999999983, 6.052499999999983, 6.062499999999983, 6.082499999999983, 6.122499999999983, 6.142499999999982, 6.182499999999982, 6.192499999999982, 6.212499999999982, 6.252499999999982, 6.272499999999981, 6.312499999999981, 6.322499999999981, 6.342499999999981, 6.382499999999981, 6.40249999999998, 6.44249999999998, 6.45249999999998, 6.47249999999998, 6.51249999999998, 6.532499999999979, 6.572499999999979, 6.582499999999979, 6.602499999999979, 6.642499999999979, 6.662499999999978, 6.702499999999978, 6.712499999999978, 6.732499999999978, 6.772499999999978, 6.7824999999999775, 6.802499999999977, 6.842499999999977, 6.862499999999977, 6.902499999999977, 6.9124999999999766, 6.932499999999976, 6.972499999999976, 6.992499999999976, 7.032499999999976, 7.042499999999976, 7.062499999999975, 7.102499999999975, 7.122499999999975, 7.162499999999975, 7.172499999999975, 7.192499999999974, 7.232499999999974, 7.252499999999974, 7.292499999999974, 7.302499999999974, 7.322499999999973, 7.362499999999973, 7.382499999999973, 7.422499999999973, 7.432499999999973, 7.452499999999972, 7.492499999999972, 7.512499999999972, 7.552499999999972, 7.562499999999972, 7.582499999999971, 7.622499999999971, 7.642499999999971, 7.682499999999971, 7.692499999999971, 7.71249999999997, 7.75249999999997, 7.77249999999997, 7.81249999999997, 7.82249999999997, 7.842499999999969, 7.882499999999969, 7.902499999999969, 7.942499999999969, 7.952499999999969, 7.972499999999968, 8.012499999999967, 8.032499999999967, 8.072499999999966, 8.082499999999966, 8.102499999999965, 8.142499999999965, 8.162499999999964, 8.202499999999963, 8.212499999999963, 8.232499999999963, 8.272499999999962, 8.292499999999961, 8.33249999999996, 8.34249999999996, 8.36249999999996, 8.402499999999959, 8.412499999999959, 8.432499999999958, 8.472499999999958, 8.492499999999957, 8.532499999999956, 8.542499999999956, 8.562499999999956, 8.602499999999955, 8.622499999999954, 8.662499999999953, 8.672499999999953, 8.692499999999953, 8.732499999999952, 8.752499999999952, 8.79249999999995, 8.80249999999995, 8.82249999999995, 8.86249999999995, 8.882499999999949, 8.922499999999948, 8.932499999999948, 8.952499999999947, 8.992499999999946, 9.012499999999946, 9.052499999999945, 9.062499999999945, 9.082499999999945, 9.122499999999944, 9.142499999999943, 9.182499999999942, 9.192499999999942, 9.212499999999942, 9.25249999999994, 9.27249999999994, 9.31249999999994, 9.32249999999994, 9.342499999999939, 9.382499999999938, 9.402499999999938, 9.442499999999937, 9.452499999999937, 9.472499999999936, 9.512499999999935, 9.532499999999935, 9.572499999999934, 9.582499999999934, 9.602499999999933, 9.642499999999933, 9.662499999999932, 9.702499999999931, 9.712499999999931, 9.73249999999993, 9.77249999999993, 9.79249999999993, 9.832499999999929, 9.842499999999928, 9.862499999999928, 9.902499999999927, 9.912499999999927, 9.932499999999926, 9.972499999999926, 9.992499999999925, 10};
    expectedResult = tvnj::vector_abs(tvnj::vector_subtraction(result.t, expectedResult));
    UNIT_TEST_EQ(tvnj::join(expectedResult,", "), tvnj::repeat("0.000000, ", 406) + "0.000000");

    result = tvnj::backward_differentiation_formula_order_6_implicit(stiff, t, y0, std::numeric_limits<double>::infinity(), 0.01, 2, 0.01);
    expectedResult = {0, 0.01, 0.03, 0.07, 0.11000000000000001, 0.15000000000000002, 0.19000000000000003, 0.27, 0.35000000000000003, 0.51, 0.59, 0.6699999999999999, 0.7499999999999999, 0.9099999999999999, 0.9899999999999999, 1.0699999999999998, 1.2299999999999998, 1.2699999999999998, 1.3499999999999999, 1.5099999999999998, 1.5899999999999999, 1.67, 1.8299999999999998, 1.91, 1.99, 2.07, 2.23, 2.31, 2.39, 2.5500000000000003, 2.5900000000000003, 2.6700000000000004, 2.8300000000000005, 2.9100000000000006, 2.9900000000000007, 3.150000000000001, 3.230000000000001, 3.310000000000001, 3.390000000000001, 3.550000000000001, 3.6300000000000012, 3.7100000000000013, 3.7900000000000014, 3.9500000000000015, 4.030000000000001, 4.110000000000001, 4.270000000000001, 4.310000000000001, 4.3900000000000015, 4.550000000000002, 4.630000000000002, 4.710000000000002, 4.870000000000002, 4.950000000000002, 5.030000000000002, 5.110000000000002, 5.270000000000002, 5.350000000000002, 5.430000000000002, 5.5900000000000025, 5.630000000000003, 5.710000000000003, 5.870000000000003, 5.950000000000003, 6.030000000000003, 6.190000000000003, 6.270000000000003, 6.350000000000003, 6.430000000000003, 6.590000000000003, 6.6700000000000035, 6.7500000000000036, 6.910000000000004, 6.950000000000004, 7.030000000000004, 7.190000000000004, 7.270000000000004, 7.350000000000004, 7.510000000000004, 7.550000000000004, 7.630000000000004, 7.7900000000000045, 7.8700000000000045, 7.950000000000005, 8.110000000000005, 8.150000000000004, 8.230000000000004, 8.390000000000004, 8.470000000000004, 8.550000000000004, 8.630000000000004, 8.790000000000004, 8.870000000000005, 8.950000000000005, 9.110000000000005, 9.150000000000004, 9.230000000000004, 9.390000000000004, 9.470000000000004, 9.550000000000004, 9.630000000000004, 9.790000000000004, 9.870000000000005, 9.950000000000005, 10};
    expectedResult = tvnj::vector_abs(tvnj::vector_subtraction(result.t, expectedResult));
    UNIT_TEST_EQ(tvnj::join(expectedResult,", "), tvnj::repeat("0.000000, ", 104) + "0.000000");
}

#endif
